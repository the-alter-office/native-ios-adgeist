// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
// swift-module-flags: -target arm64-apple-ios17.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name AdgeistKit
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import AdSupport
@_exported import AdgeistKit
import AppTrackingTransparency
import CoreMotion
import CoreNFC
import CoreTelephony
import Foundation
import Metal
import Network
import Security
import Swift
import UIKit
import _Concurrency
import _CoreNFC_UIKit
import _StringProcessing
import _SwiftConcurrencyShims
final public class TargetingOptions {
  public init()
  final public func getTargetingInfo() -> [Swift.String : Any]
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DeviceMeta {
  final public func getDeviceType() -> Swift.String
  final public func getDeviceBrand() -> Swift.String
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getCpuType() -> Swift.String?
  #endif
  final public func getAvailableProcessors() -> Swift.Int
  final public func getOperatingSystem() -> Swift.String
  final public func getOSVersion() -> Swift.Int
  final public func getScreenDimensions() -> [Swift.String : Swift.Int]
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getNetworkType() -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getNetworkProvider() -> Swift.String?
  #endif
  final public func isTouchScreenAvailable() -> Swift.Bool
  final public func isGpuCapable() -> Swift.Bool
  final public func isNfcCapable() -> Swift.Bool
  final public func isVrCapable() -> Swift.Bool
  final public func isScreenReaderPresent() -> Swift.Bool
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getDeviceAge() -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func getDevicePricing() -> Swift.String?
  #endif
  final public func getAllDeviceInfo() -> [Swift.String : Any]
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AdgeistCore {
  public static var shared: AdgeistKit.AdgeistCore {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public static func initialize(customDomain: Swift.String? = nil) -> AdgeistKit.AdgeistCore
  #endif
  public static func getInstance() -> AdgeistKit.AdgeistCore
  final public func setUserDetails(_ details: AdgeistKit.UserDetails)
  final public func updateConsentStatus(_ consentGiven: Swift.Bool)
  final public func getConsentStatus() -> Swift.Bool
  final public func getCreative() -> AdgeistKit.FetchCreative
  final public func postCreativeAnalytics() -> AdgeistKit.CreativeAnalytics
  final public func logEvent(_ event: AdgeistKit.Event)
  @objc deinit
}
public struct CreativeDataModel : Swift.Codable {
  public let success: Swift.Bool
  public let message: Swift.String
  public let data: AdgeistKit.BidResponseData?
  #if compiler(>=5.3) && $NonescapableTypes
  public init(success: Swift.Bool, message: Swift.String, data: AdgeistKit.BidResponseData?)
  #endif
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BidResponseData : Swift.Codable {
  public let id: Swift.String
  public let seatBid: [AdgeistKit.SeatBid]
  public let bidId: Swift.String
  public let cur: Swift.String
  public init(id: Swift.String, seatBid: [AdgeistKit.SeatBid], bidId: Swift.String, cur: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SeatBid : Swift.Codable {
  public let bidId: Swift.String
  public let bid: [AdgeistKit.Bid]
  public init(bidId: Swift.String, bid: [AdgeistKit.Bid])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Bid : Swift.Codable {
  public let id: Swift.String
  public let impId: Swift.String
  public let price: Swift.Double?
  public let ext: AdgeistKit.BidExtension
  #if compiler(>=5.3) && $NonescapableTypes
  public init(id: Swift.String, impId: Swift.String, price: Swift.Double?, ext: AdgeistKit.BidExtension)
  #endif
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BidExtension : Swift.Codable {
  public let creativeUrl: Swift.String
  public let ctaUrl: Swift.String
  public let creativeTitle: Swift.String
  public let creativeDescription: Swift.String
  public init(creativeUrl: Swift.String, ctaUrl: Swift.String, creativeTitle: Swift.String, creativeDescription: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class CreativeAnalytics {
  public static let IMPRESSION: Swift.String
  public static let VIEW: Swift.String
  public static let TOTAL_VIEW: Swift.String
  public static let HOVER: Swift.String
  public static let CLICK: Swift.String
  public static let VIDEO_PLAYBACK: Swift.String
  public static let VIDEO_QUARTILE: Swift.String
  #if compiler(>=5.3) && $NonescapableTypes
  public func sendTrackingData(campaignId: Swift.String, adSpaceId: Swift.String, publisherId: Swift.String, eventType: Swift.String, origin: Swift.String, apiKey: Swift.String, bidId: Swift.String, isTestEnvironment: Swift.Bool = true, additionalProperties: [Swift.String : Any] = [:], completion: @escaping (Swift.String?) -> Swift.Void)
  #endif
  public func trackImpression(campaignId: Swift.String, adSpaceId: Swift.String, publisherId: Swift.String, apiKey: Swift.String, bidId: Swift.String, isTestEnvironment: Swift.Bool, renderTime: Swift.Float)
  public func trackView(campaignId: Swift.String, adSpaceId: Swift.String, publisherId: Swift.String, apiKey: Swift.String, bidId: Swift.String, isTestEnvironment: Swift.Bool, viewTime: Swift.Float, visibilityRatio: Swift.Float, scrollDepth: Swift.Float, timeToVisible: Swift.Float)
  public func trackTotalView(campaignId: Swift.String, adSpaceId: Swift.String, publisherId: Swift.String, apiKey: Swift.String, bidId: Swift.String, isTestEnvironment: Swift.Bool, totalViewTime: Swift.Float, visibilityRatio: Swift.Float)
  public func trackClick(campaignId: Swift.String, adSpaceId: Swift.String, publisherId: Swift.String, apiKey: Swift.String, bidId: Swift.String, isTestEnvironment: Swift.Bool)
  public func trackVideoPlayback(campaignId: Swift.String, adSpaceId: Swift.String, publisherId: Swift.String, apiKey: Swift.String, bidId: Swift.String, isTestEnvironment: Swift.Bool, totalPlaybackTime: Swift.Float)
  public func trackVideoQuartile(campaignId: Swift.String, adSpaceId: Swift.String, publisherId: Swift.String, apiKey: Swift.String, bidId: Swift.String, isTestEnvironment: Swift.Bool, quartile: Swift.String)
  @objc deinit
}
public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init(_ value: Any)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct Event : Swift.Codable {
  public let eventType: Swift.String
  public let eventProperties: [Swift.String : Any]?
  #if compiler(>=5.3) && $NonescapableTypes
  public init(eventType: Swift.String, eventProperties: [Swift.String : Any]? = nil)
  #endif
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserDetails : Swift.Codable {
  public let userId: Swift.String?
  public let userName: Swift.String?
  public let email: Swift.String?
  public let phone: Swift.String?
  #if compiler(>=5.3) && $NonescapableTypes
  public init(userId: Swift.String? = nil, userName: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil)
  #endif
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public func toDictionary() -> [Swift.String : Any]
}
@_hasMissingDesignatedInitializers public class CdpClient {
  public func sendEventToCdp(_ event: AdgeistKit.Event, consentGiven: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 11.0, *)
final public class DeviceIdentifier {
  final public func getDeviceIdentifier(completion: @escaping (Swift.String) -> Swift.Void)
  final public func clearGeneratedID()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FetchCreative {
  #if compiler(>=5.3) && $NonescapableTypes
  public func fetchCreative(apiKey: Swift.String, origin: Swift.String, adSpaceId: Swift.String, companyId: Swift.String, isTestEnvironment: Swift.Bool = true, completion: @escaping (AdgeistKit.CreativeDataModel?) -> Swift.Void)
  #endif
  @objc deinit
}
